// interface Pile
interface Pile {
public boolean estVide();
public Object dernier();
public void depiler();
public void empiler(Object o);
}
/* Le recours à une interface peut s’expliquer par la possibilité après
de faire
le choix de la représentation physique voulue (chainée ou contigüe) */
// Représentation chainée : listes de Object
class Noeud {
Object info;
Noeud suivant;
}
// implémenter les Pile avec des listes (représentation chainée)
class PileListe implements Pile{
private Noeud sommet;
public PileListe(){
sommet = null;
}
public boolean estVide(){
return (sommet == null);
}
public Object dernier(){
return sommet.info;
}
public void empiler(Object o){
Noeud n = new Noeud();
n.info = o;
n.suivant = sommet;
sommet = n;
}
public void depiler(){
	sommet = sommet.suivant;
	}
	}
	class TestPile{
	public static void main(String[]args){
	PileListe p = new PileListe();
	for(int i = 0 ; i < 10 ; i++)
	p.empiler(new Integer(i));
	while(!p.estVide()){
	System.out.println((Integer) p.dernier());
	p.depiler();
	}
	// Tester aussi p.empiler("L'entier " + i);
	/* System.out.println((Integer) p.dernier());
	=> Erreur à l'exécution de casting
	=> System.out.println(p.dernier());
	=> Ouverture sur les exceptions */
	/* Remplacer while(!p.estVide()) par for(int i = 0 ; i < 20 ; i++)
	=> Erreur à l'exécution lors du dépilement d'une pile vide
	=> Ouverture sur les exceptions mais surtout sur la généricité */

}}